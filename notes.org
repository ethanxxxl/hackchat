#+title: Notes
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2022-07-22 Fri 23:57]
| Headline                                  |    Time |      |
|-------------------------------------------+---------+------|
| *Total time*                              | *10:55* |      |
|-------------------------------------------+---------+------|
| Issues                                    |    1:23 |      |
| \_  client and server each block when...  |         | 0:58 |
| \_  buffers needs to be dynamically sized |         | 0:25 |
| Features                                  |    9:32 |      |
| \_  standardized packet formats           |         | 8:06 |
| \_  client UI                             |         | 1:26 |
#+END:

* Issues
** DONE client and server each block when they read.
:LOGBOOK:
CLOCK: [2022-07-20 Wed 16:57]--[2022-07-20 Wed 16:59] =>  0:02
CLOCK: [2022-07-20 Wed 16:00]--[2022-07-20 Wed 16:56] =>  0:56
:END:
 stream.read() blocks when there is no data to read. this becomes an issue when there are multiple clients connected. nobody can recieve any data until everybody sends something.

** DONE buffers needs to be dynamically sized
:LOGBOOK:
CLOCK: [2022-07-20 Wed 16:59]--[2022-07-20 Wed 17:24] =>  0:25
:END:
** TODO server doesn't drop clients when they disconnect
** TODO Client weird behavior with long messages
** TODO Commands are handled soley by the client
** TODO investigate delay in client user interface main code.

* Features
#+BEGIN: clocktable :scope subtree :maxlevel 3
#+CAPTION: Clock summary at [2022-07-22 Fri 23:56]
| Headline                        | Time   |      |      |
|---------------------------------+--------+------+------|
| *Total time*                    | *9:32* |      |      |
|---------------------------------+--------+------+------|
| Features                        | 9:32   |      |      |
| \_  standardized packet formats |        | 8:06 |      |
| \_  client UI                   |        | 1:26 |      |
| \_    Research                  |        |      | 1:26 |
#+END:

** DONE standardized packet formats
:LOGBOOK:
CLOCK: [2022-07-22 Fri 19:54]--[2022-07-22 Fri 22:03] =>  2:09
CLOCK: [2022-07-22 Fri 19:18]--[2022-07-22 Fri 19:54] =>  0:36
CLOCK: [2022-07-21 Thu 22:26]--[2022-07-21 Thu 23:58] =>  1:32
CLOCK: [2022-07-21 Thu 19:18]--[2022-07-21 Thu 19:32] =>  0:14
CLOCK: [2022-07-20 Wed 23:13]--[2022-07-21 Thu 00:25] =>  1:12
CLOCK: [2022-07-20 Wed 20:45]--[2022-07-20 Wed 23:08] =>  2:23
:END:
- [X] chat messages
  messages should include time stamps
- [ ] chat history request
- [ ] change channel

<2022-07-20 Wed>
you have all of these message types, including a header, but no way of determining the type of the packet when you deserialize it. you need to include a way to easily get the type of packet, so it can be decoded.

<2022-07-21 Thu 00:20>
I made some functions which read/write the tcp stream, which are able to determine what type of packet they are. the get_packet function returns a Box< dyn =Packet= >. Now the only thing the caller has to do is (somehow) coerce the =Packet= trait object into an actual object. this shouldn't be too hard. https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object


- <2022-07-21 Thu 19:30>
[[file:src/packet.rs::fn get_header(&self) -> HeaderId;][give implementors of packet this function]]
[[file:src/bin/server.rs::match pkt.get_header(); {][handle what to do on the reception of each packet]]


<2022-07-21 Thu 23:57>
[[file:src/bin/client.rs::let mut inbox = Vec::new();][client.rs area of contention]]
[[file:src/packet.rs::pub fn recv(stream: &mut TcpStream) -> Packet {][packet.rs fix location]]
you need to change to output of Packet::recv() from Packet to Vec<Packet>. if there are multiple packets in the buffer, you need to handle that in recv.
also, I change my strategy, I am just serializing an enum, no complex type system stuff.

** STRT client UI
*** Research
:LOGBOOK:
CLOCK: [2022-07-22 Fri 22:28]--[2022-07-22 Fri 23:54] =>  1:26
:END:
<2022-07-22 Fri 23:42> I researched the difference between rust async and OS threading.
- async threading is useful when you have a large number of processes that need to run concurrently. Rust essentially manages a thread pool for you, presumably with clever tricks to maintain low overhead.
- OS threads are used when you have simpler programs, or when you have procedures which block the main thread. you can move
  them into their own thread so that they don't stall the entire program.
- currently, I am preferring *threads* to async, because I feel that it fits my program better.
- I have two schools of though concerning how I will implement this program:
  1. use a thread to manage communication with the server, and reserver TUI updates for the main thread.
     + This networking thread needs to be able to recieve messages from the main thread (where the UI runs), and also send messages back to the main thread with responses from the server
     + the main thread needs to manage getting text from the user, and displaying all text to the screen.
  2. allow the networking thread to draw messages to the screen as they appear.
     + this allows for simpler user input handling, at the expense of more complicated shared data situations.

*** TUI Design
:LOGBOOK:
CLOCK: [2022-08-07 Sun 23:51]
CLOCK: [2022-08-07 Sun 22:16]--[2022-08-07 Sun 23:25] =>  1:09
CLOCK: [2022-08-07 Sun 20:17]--[2022-08-07 Sun 21:17] =>  1:00
CLOCK: [2022-08-07 Sun 16:17]--[2022-08-07 Sun 16:25] =>  0:08
:END:
- I got a bare bones UI working. it sends/recieves messages, and displays new messages to the screen in real time.
- the design is very simple, it coveres the basics though, you can type a message, quit the program (neatly), and even use the backspace button on your keyboard.
- the only weird thing is that I had to add a ~20ms delay in the main loop. I am not sure why this is, and it will likely need to be fixed at some point.

*** TUI mechanics
*** networking stuff

** TODO Server Channels
** TODO server UI
